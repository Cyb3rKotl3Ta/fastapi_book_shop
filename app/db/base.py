from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker, AsyncSession
from sqlalchemy.orm import declarative_base
from app.core.config import settings

DATABASE_URL = settings.DATABASE_URL

# echo=True is useful for debugging SQL generated by SQLAlchemy
engine = create_async_engine(DATABASE_URL, echo=False, future=True)

# expire_on_commit=False prevents attributes from being expired
# after commit, useful in async context sometimes. Adjust as needed.
AsyncSessionLocal = async_sessionmaker(
    engine,
    class_=AsyncSession,
    expire_on_commit=False
)

Base = declarative_base()

# Dependency to get DB session
async def get_db() -> AsyncSession:
    async with AsyncSessionLocal() as session:
        yield session

# Function to create tables (useful for initial setup without Alembic or for tests)
# Use Alembic for production schema management
async def init_db():
     async with engine.begin() as conn:
         # await conn.run_sync(Base.metadata.drop_all) # Uncomment to drop tables first
         await conn.run_sync(Base.metadata.create_all)