Гаразд, ось оновлений план роботи, розрахований на повну зайнятість (40 годин на тиждень) протягом 4 тижнів, з урахуванням того, що для RBAC одразу обирається варіант Б (гнучкі моделі Role та Permission).

Детальний План Роботи (4 тижні, 40 годин/тиждень)

Тиждень 1: Фундамент RBAC та Глибоке Занурення (40 годин)

Завдання 1: Поглиблене Ознайомлення з Кодовою Базою та Архітектурою (8 год)

Детальне вивчення моделей (Team, TeamMember, Subscription, TeamSettings, TeamInvitation, інтеграція django-organizations).

Аналіз існуючих API ендпоінтів (Django Ninja) та механізмів автентифікації/авторизації.

Огляд поточного стану інтеграції зі Stripe (моделі, хелпери).

Налаштування локального середовища, запуск тестів (pytest).

Обговорення з командою неявних вимог та потенційних блокерів.

Завдання 2: Проектування та Визначення Структури Дозволів (Permissions) та Ролей (Roles) (4 год)

Складання вичерпного списку необхідних атомарних дозволів (Permission, наприклад, team.manage_members, team.view_settings, billing.manage_subscription, subteam.create тощо) з категоріями.

Визначення стандартних ролей (Owner, Admin, Member, Viewer) та їхніх наборів дозволів.

Обговорення потреби та механізму кастомних ролей.

Завдання 3: Імплементація Моделей Role, Permission та Оновлення TeamMember (10 год)

Створення моделей Permission (з code, description, category) та Role (з name, team ForeignKey, permissions M2M, is_custom).

Налаштування M2M зв'язку між Role та Permission.

Оновлення моделі TeamMember: заміна role (IntegerField) на role (ForeignKey до Role).

Створення та застосування міграцій бази даних.

Створення початкових даних (fixtures або data migration) для стандартних ролей та дозволів.

Завдання 4: Реалізація Основної Логіки Перевірки Дозволів (8 год)

Розробка методу (ймовірно, на TeamMember або в окремому сервісі/менеджері) для перевірки наявності конкретного дозволу у користувача в контексті команди (user.has_perm_in_team(permission_code, team)).

Ця логіка має отримувати роль користувача в команді та перевіряти наявність дозволу у цій ролі.

Обробка спеціальних випадків (наприклад, Owner має всі дозволи).

Завдання 5: Інтеграція RBAC з Django Ninja (Клас Дозволів) (6 год)

Створення або адаптація класу HasTeamPermission(permission_code) для ninja_extra.permissions.

Реалізація логіки отримання team_id з URL або параметрів запиту, отримання TeamMember для request.user та виклику логіки перевірки дозволів з Завдання 4.

Застосування @permission_classes([HasTeamPermission(...)]) до кількох ключових API ендпоінтів для тестування (наприклад, отримання деталей команди, списку учасників).

Завдання 6: Написання Початкових Тестів для RBAC (4 год)

Створення тестів pytest для перевірки логіки has_perm_in_team.

Тестування класу HasTeamPermission (з моками запитів та користувачів).

Перевірка створення стандартних ролей та дозволів.

Разом за тиждень 1: 40 годин

Тиждень 2: Ієрархія Команд (Subteams) та Поглиблення RBAC (40 годин)

Завдання 1: Імплементація Моделі для Subteams (4 год)

Додавання поля parent = ForeignKey('self', ..., related_name='children') до моделі Team.

Створення та застосування міграцій.

Завдання 2: Розробка Логіки та API для Управління Subteams (12 год)

Реалізація логіки створення підкоманд:

Перевірка дозволу subteam.create у батьківській команді.

Перевірка ліміту на кількість підкоманд (з підписки батьківської команди, буде реалізовано пізніше, але закласти місце).

Призначення parent.

Розробка API ендпоінтів:

POST /api/teams/{parent_team_id}/subteams/ (створення)

GET /api/teams/{parent_team_id}/subteams/ (список дочірніх)

GET /api/teams/{team_id}/ (отримання деталей, включаючи інформацію про батьківську/дочірні команди)

Оновлення логіки видалення/архівації команд з урахуванням ієрархії (on_delete=models.PROTECT чи інша стратегія).

Завдання 3: Реалізація Навігації по Ієрархії (6 год)

Додавання методів до моделі Team: get_children(), get_ancestors(include_self=False), get_descendants(include_self=False).

Аналіз потенційних проблем продуктивності для глибоких ієрархій. Розгляд використання django-mptt або написання ефективних CTE запитів, якщо стандартні рекурсивні запити ORM будуть повільними.

Завдання 4: Адаптація RBAC для Ієрархії (6 год)

Визначення та реалізація правил доступу між рівнями ієрархії (наприклад, чи може адмін батьківської команди автоматично керувати підкомандами? Чи потрібні окремі дозволи?).

Оновлення HasTeamPermission або логіки перевірки дозволів для коректної роботи в контексті запитів до підкоманд (можливо, потрібно буде передавати контекст або перевіряти дозволи вгору по ієрархії).

Завдання 5: Розширення Покриття RBAC на Більшість API (6 год)

Застосування декораторів HasTeamPermission до всіх релевантних API ендпоінтів, що стосуються управління командою, її налаштуваннями, ресурсами всередині команди тощо.

Перевірка коректності обробки помилок 403 Forbidden.

Завдання 6: Комплексне Тестування RBAC та Ієрархії (6 год)

Тести на створення/отримання/видалення підкоманд.

Тести на перевірку доступу до підкоманд з батьківської команди (і навпаки).

Тести на роботу методів навігації по ієрархії (get_ancestors, get_descendants).

Тести на правильне застосування дозволів в контексті ієрархії.

Разом за тиждень 2: 40 годин

Тиждень 3: Інтеграція зі Stripe та Система Запрошень (40 годин)

Завдання 1: Stripe API - Клієнти та Підписки (14 год)

Налаштування Stripe SDK, ключів API (секретний, публічний, webhook).

Реалізація сервісу або сигналів для створення/оновлення Stripe Customer при створенні/зміні Team. Збереження stripe_customer_id.

Розробка процесу створення Stripe Subscription:

Визначення точки входу (API ендпоінт, який викликається після вибору плану на фронтенді, або інтеграція зі Stripe Checkout).

Створення підписки в Stripe, пов'язаної з Stripe Customer та обраним Price ID.

Збереження stripe_subscription_id та початкового статусу в локальній моделі Subscription.

Реалізація логіки оновлення/скасування підписки через API (наприклад, для кнопки "Cancel Subscription").

Завдання 2: Stripe Webhooks - Обробка Ключових Подій (10 год)

Створення захищеного API ендпоінту для прийому вебхуків від Stripe (/api/stripe/webhook/).

Реалізація перевірки підпису вебхука (Webhook Signature Verification).

Використання моделі ProcessedStripeEvent для забезпечення ідемпотентності.

Написання обробників (handlers) для основних подій:

customer.subscription.created/updated/deleted: Оновлення статусу, періоду дії, плану в локальній моделі Subscription.

invoice.paid: Оновлення дати оплати, можливо, скидання лімітів використання.

invoice.payment_failed: Оновлення статусу підписки, сповіщення користувача/адміна.

checkout.session.completed (якщо використовується Stripe Checkout).

Завдання 3: Завершення Системи Запрошень (12 год)

Фіналізація TeamInvitation моделі та InvitationFlow (статуси, логіка переходів).

Інтеграція перевірки ліміту на кількість членів команди (Team.get_feature_value('max_members')) перед створенням/надсиланням запрошення.

Реалізація логіки призначення ролі при прийнятті запрошення (використання TeamSettings.default_member_role або ролі, вказаної при запрошенні). Перевірка дозволу запрошуючого на призначення такої ролі.

Доопрацювання/Створення API ендпоінтів:

POST /api/teams/{team_id}/invitations/ (створення/надсилання)

GET /api/teams/{team_id}/invitations/ (список)

POST /api/invitations/{invite_guid}/accept/

POST /api/invitations/{invite_guid}/decline/

DELETE /api/teams/{team_id}/invitations/{invite_id}/ (скасування адміном)

Перевірка роботи надсилання email через Anymail/Mailgun/MJML.

Завдання 4: Тестування Stripe та Запрошень (4 год)

Написання тестів з використанням stripe-mock або моків для Stripe API (створення customer, subscription).

Тестування обробників вебхуків з різними типами подій та даними.

Написання інтеграційних тестів для повного циклу запрошення (створення -> email -> прийняття -> перевірка ролі/лімітів).

Разом за тиждень 3: 40 годин

Тиждень 4: Гейтинг Фіч, Поглиблене Тестування та Фіналізація (40 годин)

Завдання 1: Реалізація Гейтингу Фіч на Основі Підписки (10 год)

Переконатись, що метод Team.get_feature_value(feature_key) надійно працює, враховуючи активну підписку, Product, пов'язані Feature, та FeatureOverride.

Інтегрувати перевірки фіч/лімітів у ключові місця:

API Рівень: Використання HasTeamPermission або окремого декоратора/перевірки для фіч (наприклад, доступ до певних ендпоінтів).

Сервісний Рівень: Перевірка лімітів (учасники, підкоманди) перед виконанням операцій (створення, запрошення).

Дані для Фронтенду: Додавання інформації про доступні фічі/ліміти до API відповідей, щоб фронтенд міг адаптувати UI (наприклад, ендпоінт /api/teams/{team_id}/features/).

Завдання 2: Розширення Інтеграції зі Stripe (напр., Metered Billing, Portal) (6 год)

Якщо Metered Billing потрібне: Реалізація механізму звітування про використання (Stripe Usage Records API) для лімітів типу "Metered" (наприклад, stripe.SubscriptionItem.create_usage_record).

Якщо Customer Portal потрібен: Налаштування Stripe Billing Customer Portal та реалізація API ендпоінту для генерації сесії порталу (stripe.billing_portal.Session.create).

Додавання обробки інших релевантних вебхуків (наприклад, customer.updated для оновлення платіжних даних).

Завдання 3: Комплексне End-to-End та Edge-Case Тестування (12 год)

Написання інтеграційних тестів, що симулюють повні сценарії користувача: реєстрація -> створення команди -> вибір плану -> запрошення учасників -> створення підкоманди -> перевірка доступу/лімітів -> скасування підписки.

Тестування граничних випадків: запрошення існуючого користувача, зміна ролі користувача, що впливає на його доступи, видалення команди з підкомандами та активною підпискою, обробка помилок від Stripe API.

Тестування ізоляції даних: переконатися, що користувач однієї команди не може отримати доступ до даних іншої команди, навіть якщо він є учасником обох.

Тестування продуктивності ключових запитів (ієрархія, перевірка дозволів) за допомогою django-debug-toolbar або інших інструментів.

Завдання 4: Рефакторинг, Оптимізація та Документація Коду (8 год)

Перегляд всього нового коду на відповідність стандартам (PEP8, Flake8, Black).

Виявлення та усунення дублювання коду (принцип DRY).

Покращення читабельності, додавання коментарів та docstrings там, де це необхідно.

Оптимізація запитів до бази даних, якщо були виявлені проблеми на етапі тестування.

Написання або оновлення документації в README чи внутрішній wiki щодо нової архітектури RBAC, ієрархії команд та інтеграції зі Stripe.

Завдання 5: Фінальний Огляд, Підготовка до Розгортання та Передача Знань (4 год)

Проведення фінального code review з командою.

Обговорення змін, необхідних для конфігурації на продакшені (змінні середовища для Stripe ключів, налаштування вебхуків).

Переконатися, що всі тести проходять у CI/CD пайплайні.

Проведення демонстрації реалізованого функціоналу для команди.

Відповіді на запитання, передача знань про архітектурні рішення.

Разом за тиждень 4: 40 годин

Цей деталізований план передбачає інтенсивну роботу протягом місяця і покриває всі ключові аспекти проекту. Він амбітний, але реалістичний для досвідченого розробника на повний робочий день. Важливо підтримувати постійну комунікацію для своєчасного вирішення питань та можливого коригування пріоритетів.